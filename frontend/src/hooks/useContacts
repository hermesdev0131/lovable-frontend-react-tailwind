import { useState } from 'react';

interface Contact {
  id?: string;
  name: string;
  email: string;
}

export const useContacts = () => {
  const [contacts, setContacts] = useState<Contact[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const createContact = async (contact: Contact) => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/hubspot/contact', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(contact),
      });
      if (!response.ok) throw new Error('Failed to create contact');
      const newContact = await response.json();
      setContacts((prev) => [...prev, newContact]);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const updateContact = async (contactId: string, contactData: Partial<Contact>) => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/hubspot/contact', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ contactId, contactData }),
      });
      if (!response.ok) throw new Error('Failed to update contact');
      const updatedContact = await response.json();
      setContacts((prev) =>
        prev.map((contact) => (contact.id === contactId ? updatedContact : contact))
      );
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const deleteContact = async (contactId: string) => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/hubspot/contact', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ contactId }),
      });
      if (!response.ok) throw new Error('Failed to delete contact');
      setContacts((prev) => prev.filter((contact) => contact.id !== contactId));
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return { contacts, loading, error, createContact, updateContact, deleteContact };
};
